#!/bin/bash

set -e

script_dir="$(dirname "$(readlink -f "$0")")"

die() {
    echo "FATAL: $* Please contact SDD and report this!" >&2
    exit 1
}

get_rhel_version() {
    lsb_release -i -r | grep Release | awk '{print $2}' | awk -F . '{print $1}'
}

repo_root="$(readlink -f "$script_dir/..")"


if cat "$repo_root/turtle_orm/settings.py" |& grep -q "Permission denied"; then
    echo "Unable to read settings file; permission denied. Please contact GBT staff to request permission!" >&2
    exit 2
fi

# If RHEL7...
if [ "$(get_rhel_version)" == "7" ]; then
    source "$repo_root/rhel7-env/bin/activate" || die "Could not activate virtual environment"
elif [ "$(get_rhel_version)" == "6" ]; then
    source "$repo_root/rhel6-env/bin/activate" || die "Could not activate virtual environment"
    export LD_LIBRARY_PATH=/users/gbors/python3.5/lib:$LD_LIBRARY_PATH
    export LDFLAGS="-L/users/gbors/python3.5/lib -lrt"
else
    die "Unknown RHEL version!"
fi

export DJANGO_SETTINGS_MODULE=turtle_orm.settings

# Assume that if aren't in an SSH tunnel then we aren't on a suitable host for querying
if [ -z "$SSH_CONNECTION" ]; then
    echo "WARNING: This will be very slow on your workstation! Consider ssh'ing to a data processing machine." >&2
    echo "Continue? [y/n] "
    read -r response
    if [ "${response,,}" != "y" ]; then
        echo "Well alright then! (To avoid this in the future, run: SSH_CONNECTION=FOO turtlecli $*" >&2
        exit 2
    fi
fi

PYTHONPATH="$repo_root":$PYTHONPATH python -m turtlecli "$@"
